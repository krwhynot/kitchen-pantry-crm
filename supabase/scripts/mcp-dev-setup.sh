#!/bin/bash
# Kitchen Pantry CRM - MCP Development Setup Script
# This script sets up the MCP development environment for Supabase

set -e

echo "🔧 Setting up MCP Development Environment for Kitchen Pantry CRM"
echo "================================================================"

# Check if Supabase CLI is installed
if ! command -v supabase &> /dev/null; then
    echo "❌ Supabase CLI is not installed. Please install it first."
    exit 1
fi

# Check if we can connect to a PostgreSQL instance
if ! command -v psql &> /dev/null; then
    echo "⚠️  PostgreSQL client (psql) not found. Installing via package manager..."
    # Attempt to install PostgreSQL client based on the system
    if command -v apt-get &> /dev/null; then
        sudo apt-get update && sudo apt-get install -y postgresql-client
    elif command -v brew &> /dev/null; then
        brew install postgresql
    elif command -v yum &> /dev/null; then
        sudo yum install -y postgresql
    else
        echo "❌ Please install PostgreSQL client manually"
        exit 1
    fi
fi

# Navigate to project root
cd "$(dirname "$0")/../.."

echo "📁 Project directory: $(pwd)"

# Check if Supabase is already running or start it
echo "🚀 Setting up Supabase development environment..."

# Try to check if Supabase is already running
if supabase status &> /dev/null; then
    echo "✅ Supabase services are already running"
else
    echo "🔄 Starting Supabase local development environment..."
    # Start Supabase without Docker requirement (using native binaries)
    supabase start --ignore-health-check
    
    # Wait for services to be ready
    echo "⏳ Waiting for services to be ready..."
    sleep 15
    
    # Verify services are running
    if ! supabase status &> /dev/null; then
        echo "❌ Failed to start Supabase services"
        echo "💡 Alternative: Use remote Supabase project for development"
        echo "   Set SUPABASE_URL and SUPABASE_ANON_KEY in .env.development"
        exit 1
    fi
fi

# Get connection details
echo "🔍 Getting connection details..."
supabase status

# Apply migrations
echo "📊 Applying database migrations..."
supabase db reset --linked=false

# Setup MCP development utilities
echo "🛠️  Setting up MCP development utilities..."

# Get dynamic values from Supabase status
SUPABASE_STATUS=$(supabase status --output json 2>/dev/null || echo "{}")

if echo "$SUPABASE_STATUS" | jq -e . >/dev/null 2>&1; then
    # Extract values from local Supabase instance
    ANON_KEY=$(echo "$SUPABASE_STATUS" | jq -r '.anon_key // "your_anon_key_here"')
    SERVICE_ROLE_KEY=$(echo "$SUPABASE_STATUS" | jq -r '.service_role_key // "your_service_role_key_here"')
    DB_PORT=$(echo "$SUPABASE_STATUS" | jq -r '.db_port // "54322"')
    API_PORT_VAL=$(echo "$SUPABASE_STATUS" | jq -r '.api_port // "54321"')
    
    echo "📝 Creating development environment file with local Supabase settings..."
    SUPABASE_URL="http://127.0.0.1:$API_PORT_VAL"
    DATABASE_URL="postgresql://postgres:postgres@127.0.0.1:$DB_PORT/postgres"
else
    echo "⚠️  Could not get local Supabase status, creating template for remote connection..."
    ANON_KEY="your_supabase_anon_key_here"
    SERVICE_ROLE_KEY="your_supabase_service_role_key_here"
    SUPABASE_URL="https://your-project.supabase.co"
    DATABASE_URL="your_database_connection_string_here"
fi

# Create development environment file
cat > .env.development << EOF
# Kitchen Pantry CRM - Development Environment Variables
# Generated by MCP setup script

# Supabase Configuration
SUPABASE_URL=$SUPABASE_URL
SUPABASE_ANON_KEY=$ANON_KEY
SUPABASE_SERVICE_ROLE_KEY=$SERVICE_ROLE_KEY

# Database Connection (for MCP)
DATABASE_URL=$DATABASE_URL

# MCP Configuration
MCP_ENVIRONMENT=development
MCP_CONFIG_PATH=./supabase/mcp-config.json
MCP_SECURITY_LEVEL=development_only

# Development Settings
NODE_ENV=development
LOG_LEVEL=debug
API_PORT=3001

# Frontend Development
VITE_SUPABASE_URL=$SUPABASE_URL
VITE_SUPABASE_ANON_KEY=$ANON_KEY
EOF

echo "✅ MCP Development environment setup complete!"
echo ""
echo "📝 Next steps:"
echo "1. Source the environment variables: source .env.development"
echo "2. Install dependencies: pnpm install"
echo "3. Start the development servers: pnpm dev"

if echo "$SUPABASE_STATUS" | jq -e . >/dev/null 2>&1; then
    STUDIO_PORT=$(echo "$SUPABASE_STATUS" | jq -r '.studio_port // "54323"')
    echo "4. Open Supabase Studio: http://127.0.0.1:$STUDIO_PORT"
else
    echo "4. Configure your remote Supabase project credentials in .env.development"
fi

echo "5. Use MCP tools for schema management and development"
echo ""
echo "🔧 Available MCP commands:"
echo "- supabase db reset: Reset database with fresh migrations and seed data"
echo "- supabase db diff: Generate migration files from schema changes"
echo "- supabase db push: Push local changes to remote (when ready)"
echo "- supabase gen types typescript: Generate TypeScript types"
echo "- supabase functions new <name>: Create new Edge Function"
echo ""
echo "🔧 Alternative development options:"
echo "- Use remote Supabase project: Update .env.development with your project credentials"
echo "- Use local PostgreSQL: Install PostgreSQL locally and update DATABASE_URL"
echo "- Use cloud development: Connect directly to your hosted Supabase project"
echo ""
echo "🔒 Security Note: This setup is for DEVELOPMENT ONLY"
echo "   MCP access is restricted to local development environment"
echo "   Never use development credentials in production"